
        mate-computacional/
        ├── algorithms/
        |   |-- AdjacencyMatrix.py
        |   |-- AlgorithmDijtskra.py
        |   |-- RoadMatrix.py
        ├── helpers/
        |   |-- GraphMatrixDisplay.py 
        |   |-- OSFunctions.py
        |   |-- CreateGraphForDijstkra.py
        ├── output/
        |   |-- dijkstra_animation.gif 
        ├── public/
        |   |-- Application.py  
        ├── structures/
        |   |-- AnimateGraphDijsktra.py
        |   |-- NetworkEdge.py 
        |   |-- NetworkGraph.py 
        |   |-- NetworkNode.py 
        └── __init__.py

function algorithmDijkstra(graph, start, target):
    Inicializar distances a todos los nodos como infinito
    Establecer distance al nodo start como 0
    Inicializar previous_nodes para todos los nodos como Nulo
    Crear una priority_queue vacía
    Añadir (0, start) a la priority_queue
    Inicializar lista states vacía
    Inicializar conjunto visited vacío
    MIENTRAS la priority_queue no esté vacía:
        current_distance, current_node = remover mínimo de la priority_queue
        SI current_node está en visited:
            CONTINUAR
        Añadir current_node a visited
        SI current_node es igual a target:
            SALIR DEL BUCLE
 PARA CADA neighbor, weight EN graph[current_node]:
            distance = current_distance + weight
            AÑADIR (current_node, neighbor) a states
            SI distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                Añadir (distance, neighbor) a la priority_queue
    Inicializar lista con PATH vacía
    current = target
    MIENTRAS current no sea Nulo:
        Añadir current a path
        current = previous_nodes[current]
    Invertir path
    SI primer elemento de path no es start:
        DEVOLVER Nulo, infinito, states
    DEVOLVER path, distances[target], states
